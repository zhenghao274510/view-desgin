{"remainingRequest":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js!D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\router\\permission.js","dependencies":[{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\router\\permission.js","mtime":1594201434039},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"D:\\\\lixindom\\\\2020\\u5E74\\\\selfMake\\\\Hui-Admin-Pro\\u4E00\\u4E2A\\u4F7F\\u7528iView\\u7684\\u524D\\u7AEF\\u6846\\u67B6\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\lixindom\\\\2020\\u5E74\\\\selfMake\\\\Hui-Admin-Pro\\u4E00\\u4E2A\\u4F7F\\u7528iView\\u7684\\u524D\\u7AEF\\u6846\\u67B6\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport router from \"./index\";\nimport store from \"../store\";\nimport { indexPage, loginPage, siteTitle } from \"../config/config\";\nimport Vue from \"vue\";\nimport ViewUI from 'view-design';\nvar whiteList = ['/login', '/forget-password']; // 无需权限路由集合\n\nrouter.beforeEach(\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(to, from, next) {\n    var isLogin, hasRoles, item, _ref2, roles, accessRoutes;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 开始加载进度条\n            ViewUI.LoadingBar.start(); // 设置页面title\n\n            document.title = to.meta.title + ' -' + siteTitle; // 确定用户是否已登录\n\n            isLogin = store.getters.isLogin;\n\n            if (!isLogin) {\n              _context.next = 35;\n              break;\n            }\n\n            if (!(to.path === '/login')) {\n              _context.next = 9;\n              break;\n            }\n\n            // 如果已登录，重定向到主页\n            next({\n              name: indexPage\n            }); // 停止加载进度条\n\n            ViewUI.LoadingBar.finish();\n            _context.next = 33;\n            break;\n\n          case 9:\n            // 确定用户是否已通过getInfo获得其权限角色\n            hasRoles = store.getters.roles && store.getters.roles.length > 0;\n\n            if (!hasRoles) {\n              _context.next = 16;\n              break;\n            }\n\n            // debugger\n            item = {\n              fullPath: to.fullPath,\n              meta: to.meta,\n              name: to.name,\n              path: to.path\n            }; // 增加tab多页签数据\n\n            store.dispatch('tagsView/pushRouter', item);\n            next();\n            _context.next = 33;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.next = 19;\n            return store.dispatch('user/getInfo');\n\n          case 19:\n            _ref2 = _context.sent;\n            roles = _ref2.roles;\n            _context.next = 23;\n            return store.dispatch('permission/generateRoutes', roles);\n\n          case 23:\n            accessRoutes = _context.sent;\n            // 增加异步路由\n            router.addRoutes(accessRoutes); // hack方法，以确保addRoutes是完整的\n            // 设置replace：true，导航不会留下历史记录\n\n            next(_objectSpread({}, to, {\n              replace: true\n            }));\n            _context.next = 33;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](16);\n            // 删除token并进入登录页面以重新登录\n            // await store.dispatch('user/resetToken')\n            ViewUI.Message.error(_context.t0 || 'Has Error');\n            next({\n              name: loginPage\n            }); // 停止加载进度条\n\n            ViewUI.LoadingBar.finish();\n\n          case 33:\n            _context.next = 36;\n            break;\n\n          case 35:\n            /* 没有 token*/\n            if (whiteList.indexOf(to.path) !== -1) {\n              // 免权限直接进入\n              next();\n            } else {\n              // 其他无权访问的页面将重定向到登录页面\n              next({\n                name: loginPage\n              }); // 停止加载进度条\n\n              ViewUI.LoadingBar.finish();\n            }\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[16, 28]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.afterEach(function (to, from, next) {\n  // 停止加载进度条\n  ViewUI.LoadingBar.finish(); // 路由切换 滚到到顶部\n\n  window.scrollTo(0, 0);\n\n  if (to.name !== loginPage) {\n    // 如果不是登录页 内容区域滚动到顶部\n    Vue.nextTick(function () {\n      if (document.getElementById('main_content')) {\n        document.getElementById('main_content').scrollTo(0, 0);\n      }\n    });\n  }\n});",{"version":3,"sources":["D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\router\\permission.js"],"names":["router","store","indexPage","loginPage","siteTitle","Vue","ViewUI","whiteList","beforeEach","to","from","next","LoadingBar","start","document","title","meta","isLogin","getters","path","name","finish","hasRoles","roles","length","item","fullPath","dispatch","accessRoutes","addRoutes","replace","Message","error","indexOf","afterEach","window","scrollTo","nextTick","getElementById"],"mappings":"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","sourcesContent":["import router from './index'\r\nimport store from '../store'\r\nimport {indexPage, loginPage, siteTitle} from \"../config/config\";\r\nimport Vue from \"vue\";\r\nimport ViewUI from 'view-design';\r\n\r\nconst whiteList = ['/login', '/forget-password'] // 无需权限路由集合\r\n\r\nrouter.beforeEach(async(to, from, next) => {\r\n  // 开始加载进度条\r\n  ViewUI.LoadingBar.start()\r\n\r\n  // 设置页面title\r\n  document.title = to.meta.title+' -'+siteTitle\r\n\r\n  // 确定用户是否已登录\r\n  const isLogin = store.getters.isLogin\r\n  if (isLogin) { // 判断是否有token\r\n    if (to.path === '/login') {\r\n      // 如果已登录，重定向到主页\r\n      next({ name: indexPage })\r\n      // 停止加载进度条\r\n      ViewUI.LoadingBar.finish()\r\n    } else {\r\n      // 确定用户是否已通过getInfo获得其权限角色\r\n      const hasRoles = store.getters.roles && store.getters.roles.length > 0\r\n      if (hasRoles) {\r\n        // debugger\r\n        let item = {\r\n          fullPath: to.fullPath,\r\n          meta: to.meta,\r\n          name: to.name,\r\n          path: to.path\r\n        }\r\n        // 增加tab多页签数据\r\n        store.dispatch('tagsView/pushRouter', item)\r\n        next()\r\n      } else {\r\n        try {\r\n          // 获取用户信息 这里可以进行一些操作\r\n          const { roles } = await store.dispatch('user/getInfo')\r\n\r\n          // 根据角色生成可访问的路由\r\n          const accessRoutes = await store.dispatch('permission/generateRoutes', roles)\r\n          // 增加异步路由\r\n          router.addRoutes(accessRoutes)\r\n\r\n          // hack方法，以确保addRoutes是完整的\r\n          // 设置replace：true，导航不会留下历史记录\r\n          next({ ...to, replace: true })\r\n        } catch (error) {\r\n          // 删除token并进入登录页面以重新登录\r\n          // await store.dispatch('user/resetToken')\r\n          ViewUI.Message.error(error || 'Has Error')\r\n          next({name: loginPage})\r\n          // 停止加载进度条\r\n          ViewUI.LoadingBar.finish()\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    /* 没有 token*/\r\n\r\n    if (whiteList.indexOf(to.path) !== -1) {\r\n      // 免权限直接进入\r\n      next()\r\n    } else {\r\n      // 其他无权访问的页面将重定向到登录页面\r\n      next({name: loginPage})\r\n      // 停止加载进度条\r\n      ViewUI.LoadingBar.finish()\r\n    }\r\n  }\r\n})\r\n\r\nrouter.afterEach((to, from, next) => {\r\n  // 停止加载进度条\r\n  ViewUI.LoadingBar.finish()\r\n  // 路由切换 滚到到顶部\r\n  window.scrollTo(0, 0);\r\n  if(to.name !== loginPage){\r\n    // 如果不是登录页 内容区域滚动到顶部\r\n    Vue.nextTick(() => {\r\n      if (document.getElementById('main_content')) {\r\n        document.getElementById('main_content').scrollTo(0, 0);\r\n      }\r\n    })\r\n  }\r\n})\r\n"]}]}