{"remainingRequest":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js!D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\src\\api\\request.js","dependencies":[{"path":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\src\\api\\request.js","mtime":1594201433893},{"path":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\r\n *   @description 接口请求拦截\r\n *   @author Xiaohui Zeng\r\n *   @date 2020/5/14\r\n */\nimport axios from 'axios';\nimport { Message } from 'view-design'; // 创建一个axios实例\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  timeout: 30000,\n  // 请求超时时间 默认30秒\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}); // 请求拦截器\n\nservice.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('userToken'); // 判断是否存在token，如果存在的话，则每个http header都加上token\n\n  if (token) {\n    config.headers['accessToken'] = token;\n  }\n\n  return config;\n}, function (error) {\n  // debug\n  console.log(error);\n  return Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  if (res.code !== 1) {\n    Message.warning(res.msg || 'Error');\n    return Promise.reject(new Error(res.msg || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  // debug\n  console.log('err' + error);\n  Message.error(res.msg || 'Error');\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\src\\api\\request.js"],"names":["axios","Message","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","error","console","log","Promise","reject","response","res","data","code","warning","msg","Error"],"mappings":"AAAA;;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;;AACA,IAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADI;AACc;AACvCC,EAAAA,OAAO,EAAE,KAFgB;AAET;AAChBC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAHgB,CAAb,CAAhB,C,CAOA;;AACAP,OAAO,CAACQ,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd,CADmC,CAEnC;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACJ,OAAP,CAAe,aAAf,IAAgCK,KAAhC;AACH;;AACD,SAAOD,MAAP;AACH,CAPL,EAQI,UAAAI,KAAK,EAAI;AACL;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAZL,E,CAeA;;AACAf,OAAO,CAACQ,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B,CACI,UAAAU,QAAQ,EAAI;AACR,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;;AAEA,MAAID,GAAG,CAACE,IAAJ,KAAa,CAAjB,EAAoB;AAChBxB,IAAAA,OAAO,CAACyB,OAAR,CAAgBH,GAAG,CAACI,GAAJ,IAAW,OAA3B;AACA,WAAOP,OAAO,CAACC,MAAR,CAAe,IAAIO,KAAJ,CAAUL,GAAG,CAACI,GAAJ,IAAW,OAArB,CAAf,CAAP;AACH,GAHD,MAGO;AACH,WAAOJ,GAAP;AACH;AACJ,CAVL,EAWI,UAAAN,KAAK,EAAI;AACL;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB;AACAhB,EAAAA,OAAO,CAACgB,KAAR,CAAcM,GAAG,CAACI,GAAJ,IAAW,OAAzB;AACA,SAAOP,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAhBL;AAmBA,eAAef,OAAf","sourcesContent":["/**\r\n *   @description 接口请求拦截\r\n *   @author Xiaohui Zeng\r\n *   @date 2020/5/14\r\n */\r\nimport axios from 'axios'\r\nimport {Message} from 'view-design';\r\n// 创建一个axios实例\r\nconst service = axios.create({\r\n    baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\r\n    timeout: 30000, // 请求超时时间 默认30秒\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n// 请求拦截器\r\nservice.interceptors.request.use(config => {\r\n        const token = localStorage.getItem('userToken');\r\n        // 判断是否存在token，如果存在的话，则每个http header都加上token\r\n        if (token) {\r\n            config.headers['accessToken'] = token\r\n        }\r\n        return config\r\n    },\r\n    error => {\r\n        // debug\r\n        console.log(error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const res = response.data\r\n\r\n        if (res.code !== 1) {\r\n            Message.warning(res.msg || 'Error')\r\n            return Promise.reject(new Error(res.msg || 'Error'))\r\n        } else {\r\n            return res\r\n        }\r\n    },\r\n    error => {\r\n        // debug\r\n        console.log('err' + error)\r\n        Message.error(res.msg || 'Error')\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service\r\n"]}]}