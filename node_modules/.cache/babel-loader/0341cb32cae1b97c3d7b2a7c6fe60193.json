{"remainingRequest":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js!D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\components\\editor\\editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\components\\editor\\editor.vue","mtime":1594201433973},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\nimport Editor from 'wangeditor';\nexport default {\n  name: \"Editor\",\n  props: {\n    // 绑定的值\n    value: {\n      type: String,\n      default: ''\n    },\n    // 绑定的值的类型, enum: ['html', 'text']\n    valueType: {\n      type: String,\n      default: 'html',\n      validator: function validator(val) {\n        // {String|Number} value 要验证的字符串或数值 validList 用来验证的列表\n        function oneOf(value, validList) {\n          for (var i = 0; i < validList.length; i++) {\n            if (value === validList[i]) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        return oneOf(val, ['html', 'text']);\n      }\n    },\n    // 设置change事件触发时间间隔\n    changeInterval: {\n      type: Number,\n      default: 500\n    },\n    // 是否开启本地存储\n    cache: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.init();\n  },\n  computed: {\n    editorId: function editorId() {\n      return \"editor\".concat(this._uid);\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      this.editor = new Editor(\"#\".concat(this.editorId));\n      this.editor.customConfig.onchangeTimeout = this.changeInterval; // 设置change事件触发时间间隔\n\n      this.editor.customConfig.uploadImgShowBase64 = true; // 使用 base64 保存图片\n\n      this.editor.customConfig.zIndex = 100; // 配置编辑区域的 z-index\n\n      this.editor.customConfig.onchange = function (html) {\n        var text = _this.editor.txt.text();\n\n        if (_this.cache) {\n          localStorage.editorCache = html;\n        }\n\n        _this.$emit('input', _this.valueType === 'html' ? html : text);\n\n        _this.$emit('on-change', html, text);\n      };\n\n      this.editor.create(); // create这个方法一定要在所有配置项之后调用\n      // this.editor.txt.html('<p>用 JS 设置的内容</p>') // 设置内容\n      // this.editor.txt.append('<p>追加的内容</p>') // 可继续追加内容。\n      // this.editor.txt.clear()清空编辑器内容\n      // console.log('this.editor.txt.html()----------'+this.editor.txt.html())// 显示内容\n      // console.log('this.editor.txt.getJSON()----------'+JSON.stringify(this.editor.txt.getJSON()))// 获取json格式内容\n      // 如果本地有存储加载本地存储内容\n\n      var html = '';\n\n      if (localStorage.getItem('editorCache')) {\n        html = localStorage.getItem('editorCache');\n      } else {\n        html = this.value;\n      }\n\n      if (html) {\n        this.editor.txt.html(html);\n        this.editor.change(); // 更新编辑器\n      }\n    },\n    // 清除事件\n    onClear: function onClear() {\n      this.editor.txt.clear();\n      localStorage.removeItem('editorCache');\n      this.editor.change(); // 更新编辑器\n    },\n    onAppend: function onAppend(html) {\n      console.log(html);\n      this.editor.txt.html(html);\n      this.editor.change(); // 更新编辑器\n    }\n  },\n  watch: {},\n  filters: {}\n};",{"version":3,"sources":["editor.vue"],"names":[],"mappings":";;;;;;;AAOA,OAAA,MAAA,MAAA,YAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,KAAA,EAAA;AACA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAFA;AAMA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,MAFA;AAGA,MAAA,SAAA,EAAA,mBAAA,GAAA,EAAA;AACA;AACA,iBAAA,KAAA,CAAA,KAAA,EAAA,SAAA,EAAA;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,KAAA,KAAA,SAAA,CAAA,CAAA,CAAA,EAAA;AACA,qBAAA,IAAA;AACA;AACA;;AACA,iBAAA,KAAA;AACA;;AACA,eAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,CAAA;AACA;AAdA,KAPA;AAuBA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAxBA;AA4BA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AA7BA,GAFA;AAoCA,EAAA,IApCA,kBAoCA;AACA,WAAA,EAAA;AAEA,GAvCA;AAwCA,EAAA,OAxCA,qBAwCA,CACA,CAzCA;AA0CA,EAAA,OA1CA,qBA0CA;AACA,SAAA,IAAA;AACA,GA5CA;AA6CA,EAAA,QAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,6BAAA,KAAA,IAAA;AACA;AAHA,GA7CA;AAkDA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AAAA;;AACA,WAAA,MAAA,GAAA,IAAA,MAAA,YAAA,KAAA,QAAA,EAAA;AACA,WAAA,MAAA,CAAA,YAAA,CAAA,eAAA,GAAA,KAAA,cAAA,CAFA,CAEA;;AACA,WAAA,MAAA,CAAA,YAAA,CAAA,mBAAA,GAAA,IAAA,CAHA,CAGA;;AACA,WAAA,MAAA,CAAA,YAAA,CAAA,MAAA,GAAA,GAAA,CAJA,CAIA;;AAEA,WAAA,MAAA,CAAA,YAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,EAAA;;AACA,YAAA,KAAA,CAAA,KAAA,EAAA;AACA,UAAA,YAAA,CAAA,WAAA,GAAA,IAAA;AACA;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,KAAA,CAAA,SAAA,KAAA,MAAA,GAAA,IAAA,GAAA,IAAA;;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,WAAA,EAAA,IAAA,EAAA,IAAA;AACA,OAPA;;AAQA,WAAA,MAAA,CAAA,MAAA,GAdA,CAcA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,UAAA,IAAA,GAAA,EAAA;;AACA,UAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA,EAAA;AACA,QAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,aAAA,CAAA;AACA,OAFA,MAEA;AACA,QAAA,IAAA,GAAA,KAAA,KAAA;AACA;;AACA,UAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA;AACA,aAAA,MAAA,CAAA,MAAA,GAFA,CAEA;AACA;AACA,KAjCA;AAkCA;AACA,IAAA,OAnCA,qBAmCA;AACA,WAAA,MAAA,CAAA,GAAA,CAAA,KAAA;AACA,MAAA,YAAA,CAAA,UAAA,CAAA,aAAA;AACA,WAAA,MAAA,CAAA,MAAA,GAHA,CAGA;AACA,KAvCA;AAwCA,IAAA,QAxCA,oBAwCA,IAxCA,EAwCA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,WAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA;AACA,WAAA,MAAA,CAAA,MAAA,GAHA,CAGA;AACA;AA5CA,GAlDA;AAgGA,EAAA,KAAA,EAAA,EAhGA;AAkGA,EAAA,OAAA,EAAA;AAlGA,CAAA","sourcesContent":["<template>\r\n    <div class=\"editor-page\">\r\n        <div :id=\"editorId\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Editor from 'wangeditor'\r\n    export default {\r\n        name: \"Editor\",\r\n        props:{\r\n            // 绑定的值\r\n            value: {\r\n                type: String,\r\n                default: ''\r\n            },\r\n            // 绑定的值的类型, enum: ['html', 'text']\r\n            valueType: {\r\n                type: String,\r\n                default: 'html',\r\n                validator: (val) => {\r\n                    // {String|Number} value 要验证的字符串或数值 validList 用来验证的列表\r\n                    function oneOf (value, validList) {\r\n                        for (let i = 0; i < validList.length; i++) {\r\n                            if (value === validList[i]) {\r\n                                return true\r\n                            }\r\n                        }\r\n                        return false\r\n                    }\r\n                    return oneOf(val, ['html', 'text'])\r\n                }\r\n            },\r\n            // 设置change事件触发时间间隔\r\n            changeInterval: {\r\n                type: Number,\r\n                default: 500\r\n            },\r\n            // 是否开启本地存储\r\n            cache: {\r\n                type: Boolean,\r\n                default: false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n            }\r\n        },\r\n        created() {\r\n        },\r\n        mounted() {\r\n            this.init()\r\n        },\r\n        computed: {\r\n            editorId () {\r\n                return `editor${this._uid}`\r\n            }\r\n        },\r\n        methods: {\r\n            init(){\r\n                this.editor = new Editor(`#${this.editorId}`)\r\n                this.editor.customConfig.onchangeTimeout = this.changeInterval // 设置change事件触发时间间隔\r\n                this.editor.customConfig.uploadImgShowBase64 = true   // 使用 base64 保存图片\r\n                this.editor.customConfig.zIndex = 100 // 配置编辑区域的 z-index\r\n\r\n                this.editor.customConfig.onchange = (html) => {\r\n                    let text = this.editor.txt.text()\r\n                    if (this.cache) {\r\n                        localStorage.editorCache = html\r\n                    }\r\n                    this.$emit('input', this.valueType === 'html' ? html : text)\r\n                    this.$emit('on-change', html, text)\r\n                }\r\n                this.editor.create() // create这个方法一定要在所有配置项之后调用\r\n                // this.editor.txt.html('<p>用 JS 设置的内容</p>') // 设置内容\r\n                // this.editor.txt.append('<p>追加的内容</p>') // 可继续追加内容。\r\n                // this.editor.txt.clear()清空编辑器内容\r\n                // console.log('this.editor.txt.html()----------'+this.editor.txt.html())// 显示内容\r\n                // console.log('this.editor.txt.getJSON()----------'+JSON.stringify(this.editor.txt.getJSON()))// 获取json格式内容\r\n\r\n                // 如果本地有存储加载本地存储内容\r\n                let html = ''\r\n                if (localStorage.getItem('editorCache')){\r\n                    html = localStorage.getItem('editorCache')\r\n                } else {\r\n                    html = this.value\r\n                }\r\n                if (html) {\r\n                    this.editor.txt.html(html)\r\n                    this.editor.change() // 更新编辑器\r\n                }\r\n            },\r\n            // 清除事件\r\n            onClear(){\r\n                this.editor.txt.clear()\r\n                localStorage.removeItem('editorCache')\r\n                this.editor.change() // 更新编辑器\r\n            },\r\n            onAppend(html){\r\n                console.log(html)\r\n                this.editor.txt.html(html)\r\n                this.editor.change() // 更新编辑器\r\n            }\r\n        },\r\n        watch: {\r\n        },\r\n        filters: {}\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n    .editor-page {\r\n\r\n    }\r\n</style>"],"sourceRoot":"src/components/editor"}]}