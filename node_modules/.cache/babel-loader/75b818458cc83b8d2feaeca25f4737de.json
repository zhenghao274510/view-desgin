{"remainingRequest":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js!D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\store\\modules\\user.js","dependencies":[{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\store\\modules\\user.js","mtime":1594201434062},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { login as _login } from '@/api/user';\nvar state = {\n  // 用户信息数据\n  userData: sessionStorage.getItem('userData') ? JSON.parse(sessionStorage.getItem('userData')) : {},\n  // 是否登陆\n  isLogin: sessionStorage.getItem('userData') ? true : false,\n  // 角色权限集合\n  roles: []\n};\nvar mutations = {\n  // 设置角色\n  setRoles: function setRoles(state, roles) {\n    state.roles = roles;\n  },\n  // 设置用户数据\n  setUserData: function setUserData(state, data) {\n    state.userData = data;\n  },\n  // 修改登陆状态\n  setIsLogin: function setIsLogin(state, data) {\n    state.isLogin = data;\n  }\n};\nvar actions = {\n  // 登录\n  login: function login(_ref, userInfo) {\n    var commit = _ref.commit;\n    var userName = userInfo.userName,\n        passWord = userInfo.passWord;\n    return new Promise(function (resolve, reject) {\n      _login({\n        userName: userName.trim(),\n        passWord: passWord\n      }).then(function (response) {\n        var data = response.data;\n        sessionStorage.setItem('userData', JSON.stringify(data.userInfo));\n        sessionStorage.setItem('userToken', JSON.stringify(data.token));\n        commit('setUserData', data.userInfo); // 设置登录状态为false\n\n        commit('setIsLogin', true);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // 获取用户信息\n  getInfo: function getInfo(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    return new Promise(function (resolve, reject) {\n      if (!sessionStorage.getItem('userData')) {\n        reject('验证失败，请重新登录');\n      }\n\n      var userInfo = JSON.parse(sessionStorage.getItem('userData'));\n\n      if (!userInfo.roles) {\n        console.error('权限不能为空数组，否则路由死循环');\n        return;\n      } // userInfo.roles = ['admin']\n\n\n      commit('setRoles', userInfo.roles);\n      resolve(userInfo);\n    });\n  },\n  // 退出登录\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit,\n        state = _ref3.state,\n        dispatch = _ref3.dispatch;\n    return new Promise(function (resolve, reject) {\n      // commit('setToken', '')\n      // 清除用户数据\n      commit('setUserData', ''); // 清楚用户权限集合\n\n      commit('setRoles', []); // 设置登录状态为false\n\n      commit('setIsLogin', false); // 清除缓存的用户数据\n\n      sessionStorage.removeItem('userData');\n      sessionStorage.removeItem('userToken'); // 清除缓存的多页签数据\n\n      dispatch('tagsView/setRouterArr', [], {\n        root: true\n      });\n      localStorage.removeItem('dataRouter');\n      resolve();\n    });\n  },\n  // 设置用户数据\n  setUserData: function setUserData(context, data) {\n    context.commit('setUserData', data);\n  },\n  // 修改登陆状态\n  setIsLogin: function setIsLogin(context, data) {\n    context.commit('setIsLogin', data);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\store\\modules\\user.js"],"names":["login","state","userData","sessionStorage","getItem","JSON","parse","isLogin","roles","mutations","setRoles","setUserData","data","setIsLogin","actions","userInfo","commit","userName","passWord","Promise","resolve","reject","trim","then","response","setItem","stringify","token","catch","error","getInfo","console","logout","dispatch","removeItem","root","localStorage","context","namespaced"],"mappings":"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","sourcesContent":["import { login } from '@/api/user'\r\nconst state = {\r\n    // 用户信息数据\r\n    userData: sessionStorage.getItem('userData') ? JSON.parse(sessionStorage.getItem('userData')) : {},\r\n    // 是否登陆\r\n    isLogin: sessionStorage.getItem('userData') ? true : false,\r\n    // 角色权限集合\r\n    roles: []\r\n}\r\n\r\nconst mutations = {\r\n    // 设置角色\r\n    setRoles: (state, roles) => {\r\n        state.roles = roles\r\n    },\r\n    // 设置用户数据\r\n    setUserData(state, data) {\r\n        state.userData = data\r\n    },\r\n    // 修改登陆状态\r\n    setIsLogin(state, data) {\r\n        state.isLogin = data\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    // 登录\r\n    login({ commit }, userInfo) {\r\n        const { userName, passWord } = userInfo\r\n        return new Promise((resolve, reject) => {\r\n            login({ userName: userName.trim(), passWord: passWord }).then(response => {\r\n                const { data } = response\r\n                sessionStorage.setItem('userData', JSON.stringify(data.userInfo))\r\n                sessionStorage.setItem('userToken', JSON.stringify(data.token))\r\n                commit('setUserData', data.userInfo)\r\n                // 设置登录状态为false\r\n                commit('setIsLogin', true)\r\n                resolve()\r\n            }).catch(error => {\r\n                reject(error)\r\n            })\r\n        })\r\n    },\r\n\r\n    // 获取用户信息\r\n    getInfo({ commit, state }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!sessionStorage.getItem('userData')) {\r\n                reject('验证失败，请重新登录')\r\n            }\r\n            const userInfo = JSON.parse(sessionStorage.getItem('userData'))\r\n            if(!userInfo.roles) {\r\n                console.error('权限不能为空数组，否则路由死循环')\r\n                return\r\n            }\r\n            // userInfo.roles = ['admin']\r\n            commit('setRoles', userInfo.roles)\r\n            resolve(userInfo)\r\n        })\r\n    },\r\n\r\n    // 退出登录\r\n    logout({ commit, state, dispatch }) {\r\n        return new Promise((resolve, reject) => {\r\n            // commit('setToken', '')\r\n            // 清除用户数据\r\n            commit('setUserData', '')\r\n            // 清楚用户权限集合\r\n            commit('setRoles', [])\r\n            // 设置登录状态为false\r\n            commit('setIsLogin', false)\r\n            // 清除缓存的用户数据\r\n            sessionStorage.removeItem('userData')\r\n            sessionStorage.removeItem('userToken')\r\n            // 清除缓存的多页签数据\r\n            dispatch('tagsView/setRouterArr', [], { root: true })\r\n            localStorage.removeItem('dataRouter')\r\n            resolve()\r\n        })\r\n    },\r\n\r\n    // 设置用户数据\r\n    setUserData(context, data) {\r\n        context.commit('setUserData', data);\r\n    },\r\n    // 修改登陆状态\r\n    setIsLogin(context, data) {\r\n        context.commit('setIsLogin', data);\r\n    }\r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    mutations,\r\n    actions\r\n}\r\n"]}]}