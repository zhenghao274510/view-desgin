{"remainingRequest":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js!D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\src\\store\\modules\\permission.js","dependencies":[{"path":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\src\\store\\modules\\permission.js","mtime":1594201434054},{"path":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"D:\\\\lixindom\\\\2020\\\\uni-app\\\\Hui-Admin-Pro\\u4E00\\u4E2A\\u4F7F\\u7528iView\\u7684\\u524D\\u7AEF\\u6846\\u67B6\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { asyncRoutes, constantRoutes } from '@/router';\n/**\r\n * 使用meta.roleId确定当前用户是否具有权限\r\n * @param roles\r\n * @param route\r\n */\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roleId) {\n    return roles.includes(route.meta.roleId);\n  } else {\n    // 如果存在子路由 子路由有一个有权限就返回true 否则false\n    if (route.children) {\n      var tmp = route.children;\n      var flag = false;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var v = _step.value;\n          flag = hasPermission(roles, v);\n\n          if (flag) {\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return flag;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * 通过递归过滤异步路由表\r\n * @param routes asyncRoutes\r\n * @param roles\r\n */\n\n\nexport function filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = _objectSpread({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\nvar state = {\n  // 所有有权限的路由\n  routes: [],\n  // 异步路由\n  addRoutes: []\n}; // 处理路由数据 添加父级name\n\nvar routersArr = function routersArr(routers) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = routers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var setFuName = function setFuName(chid, v) {\n        // 开始处理子级\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = chid[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var k = _step3.value;\n            k.meta.fuName = v.name;\n            k.meta.fuTitle = v.meta.title;\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      };\n\n      var v = _step2.value;\n\n      if (v.children) {\n        setFuName(v.children, v);\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return routers;\n};\n\nvar mutations = {\n  setRoutes: function setRoutes(state, routes) {\n    state.addRoutes = routes;\n    state.routes = routersArr(constantRoutes.concat(routes));\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, roles) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve) {\n      var accessedRoutes = filterAsyncRoutes(asyncRoutes, roles);\n      commit('setRoutes', accessedRoutes);\n      resolve(accessedRoutes);\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["D:\\lixindom\\2020\\uni-app\\Hui-Admin-Pro一个使用iView的前端框架\\src\\store\\modules\\permission.js"],"names":["asyncRoutes","constantRoutes","hasPermission","roles","route","meta","roleId","includes","children","tmp","flag","v","filterAsyncRoutes","routes","res","forEach","push","state","addRoutes","routersArr","routers","setFuName","chid","k","fuName","name","fuTitle","title","mutations","setRoutes","concat","actions","generateRoutes","commit","Promise","resolve","accessedRoutes","namespaced"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,UAA5C;AAEA;;;;;;AAKA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,MAA7B,EAAqC;AACnC,WAAOH,KAAK,CAACI,QAAN,CAAeH,KAAK,CAACC,IAAN,CAAWC,MAA1B,CAAP;AACD,GAFD,MAEO;AACL;AACA,QAAIF,KAAK,CAACI,QAAV,EAAoB;AAClB,UAAMC,GAAG,GAAGL,KAAK,CAACI,QAAlB;AACA,UAAIE,IAAI,GAAG,KAAX;AAFkB;AAAA;AAAA;;AAAA;AAGlB,6BAAgBD,GAAhB,8HAAqB;AAAA,cAAVE,CAAU;AACnBD,UAAAA,IAAI,GAAGR,aAAa,CAACC,KAAD,EAAQQ,CAAR,CAApB;;AACA,cAAID,IAAJ,EAAU;AACR;AACD;AACF;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASlB,aAAOA,IAAP;AACD,KAVD,MAUO;AACL,aAAO,IAAP;AACD;AACF;AACF;AAED;;;;;;;AAKA,OAAO,SAASE,iBAAT,CAA2BC,MAA3B,EAAmCV,KAAnC,EAA0C;AAC/C,MAAMW,GAAG,GAAG,EAAZ;AAEAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAAX,KAAK,EAAI;AACtB,QAAMK,GAAG,qBAAQL,KAAR,CAAT;;AACA,QAAIF,aAAa,CAACC,KAAD,EAAQM,GAAR,CAAjB,EAA+B;AAC7B,UAAIA,GAAG,CAACD,QAAR,EAAkB;AAChBC,QAAAA,GAAG,CAACD,QAAJ,GAAeI,iBAAiB,CAACH,GAAG,CAACD,QAAL,EAAeL,KAAf,CAAhC;AACD;;AACDW,MAAAA,GAAG,CAACE,IAAJ,CAASP,GAAT;AACD;AACF,GARD;AAUA,SAAOK,GAAP;AACD;AAED,IAAMG,KAAK,GAAG;AACZ;AACAJ,EAAAA,MAAM,EAAE,EAFI;AAGZ;AACAK,EAAAA,SAAS,EAAE;AAJC,CAAd,C,CAMA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAW;AAAA;AAAA;AAAA;;AAAA;AAC5B,0BAAaA,OAAb,mIAAsB;AAAA,UAIXC,SAJW,GAIpB,SAASA,SAAT,CAAmBC,IAAnB,EAAyBX,CAAzB,EAA4B;AAC1B;AAD0B;AAAA;AAAA;;AAAA;AAE1B,gCAAcW,IAAd,mIAAoB;AAAA,gBAAXC,CAAW;AAClBA,YAAAA,CAAC,CAAClB,IAAF,CAAOmB,MAAP,GAAgBb,CAAC,CAACc,IAAlB;AACAF,YAAAA,CAAC,CAAClB,IAAF,CAAOqB,OAAP,GAAiBf,CAAC,CAACN,IAAF,CAAOsB,KAAxB;AACD;AALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM3B,OAVmB;;AAAA,UAAdhB,CAAc;;AACpB,UAAIA,CAAC,CAACH,QAAN,EAAgB;AACda,QAAAA,SAAS,CAACV,CAAC,CAACH,QAAH,EAAaG,CAAb,CAAT;AACD;AAQF;AAZ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAa5B,SAAOS,OAAP;AACD,CAdD;;AAgBA,IAAMQ,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,mBAACZ,KAAD,EAAQJ,MAAR,EAAmB;AAC5BI,IAAAA,KAAK,CAACC,SAAN,GAAkBL,MAAlB;AACAI,IAAAA,KAAK,CAACJ,MAAN,GAAeM,UAAU,CAAClB,cAAc,CAAC6B,MAAf,CAAsBjB,MAAtB,CAAD,CAAzB;AACD;AAJe,CAAlB;AAOA,IAAMkB,OAAO,GAAG;AACdC,EAAAA,cADc,gCACa7B,KADb,EACoB;AAAA,QAAjB8B,MAAiB,QAAjBA,MAAiB;AAChC,WAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,UAAMC,cAAc,GAAGxB,iBAAiB,CAACZ,WAAD,EAAcG,KAAd,CAAxC;AACA8B,MAAAA,MAAM,CAAC,WAAD,EAAcG,cAAd,CAAN;AACAD,MAAAA,OAAO,CAACC,cAAD,CAAP;AACD,KAJM,CAAP;AAKD;AAPa,CAAhB;AAUA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbpB,EAAAA,KAAK,EAALA,KAFa;AAGbW,EAAAA,SAAS,EAATA,SAHa;AAIbG,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import { asyncRoutes, constantRoutes } from '@/router'\r\n\r\n/**\r\n * 使用meta.roleId确定当前用户是否具有权限\r\n * @param roles\r\n * @param route\r\n */\r\nfunction hasPermission(roles, route) {\r\n  if (route.meta && route.meta.roleId) {\r\n    return roles.includes(route.meta.roleId)\r\n  } else {\r\n    // 如果存在子路由 子路由有一个有权限就返回true 否则false\r\n    if (route.children) {\r\n      const tmp = route.children\r\n      let flag = false\r\n      for (const v of tmp) {\r\n        flag = hasPermission(roles, v)\r\n        if (flag) {\r\n          break\r\n        }\r\n      }\r\n      return flag\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 通过递归过滤异步路由表\r\n * @param routes asyncRoutes\r\n * @param roles\r\n */\r\nexport function filterAsyncRoutes(routes, roles) {\r\n  const res = []\r\n\r\n  routes.forEach(route => {\r\n    const tmp = { ...route }\r\n    if (hasPermission(roles, tmp)) {\r\n      if (tmp.children) {\r\n        tmp.children = filterAsyncRoutes(tmp.children, roles)\r\n      }\r\n      res.push(tmp)\r\n    }\r\n  })\r\n\r\n  return res\r\n}\r\n\r\nconst state = {\r\n  // 所有有权限的路由\r\n  routes: [],\r\n  // 异步路由\r\n  addRoutes: []\r\n}\r\n// 处理路由数据 添加父级name\r\nconst routersArr = (routers)=>{\r\n  for(let v of routers) {\r\n    if (v.children) {\r\n      setFuName(v.children, v)\r\n    }\r\n    function setFuName(chid, v) {\r\n      // 开始处理子级\r\n      for (let k of chid) {\r\n        k.meta.fuName = v.name\r\n        k.meta.fuTitle = v.meta.title\r\n      }\r\n    }\r\n  }\r\n  return routers\r\n}\r\n\r\nconst mutations = {\r\n  setRoutes: (state, routes) => {\r\n    state.addRoutes = routes\r\n    state.routes = routersArr(constantRoutes.concat(routes))\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  generateRoutes({ commit }, roles) {\r\n    return new Promise(resolve => {\r\n      const accessedRoutes = filterAsyncRoutes(asyncRoutes, roles)\r\n      commit('setRoutes', accessedRoutes)\r\n      resolve(accessedRoutes)\r\n    })\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions\r\n}\r\n"]}]}