{"remainingRequest":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\components\\editor\\editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\src\\components\\editor\\editor.vue","mtime":1594201433973},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\lixindom\\2020年\\selfMake\\Hui-Admin-Pro一个使用iView的前端框架\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport Editor from 'wangeditor'\nexport default {\n    name: \"Editor\",\n    props:{\n        // 绑定的值\n        value: {\n            type: String,\n            default: ''\n        },\n        // 绑定的值的类型, enum: ['html', 'text']\n        valueType: {\n            type: String,\n            default: 'html',\n            validator: (val) => {\n                // {String|Number} value 要验证的字符串或数值 validList 用来验证的列表\n                function oneOf (value, validList) {\n                    for (let i = 0; i < validList.length; i++) {\n                        if (value === validList[i]) {\n                            return true\n                        }\n                    }\n                    return false\n                }\n                return oneOf(val, ['html', 'text'])\n            }\n        },\n        // 设置change事件触发时间间隔\n        changeInterval: {\n            type: Number,\n            default: 500\n        },\n        // 是否开启本地存储\n        cache: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n        }\n    },\n    created() {\n    },\n    mounted() {\n        this.init()\n    },\n    computed: {\n        editorId () {\n            return `editor${this._uid}`\n        }\n    },\n    methods: {\n        init(){\n            this.editor = new Editor(`#${this.editorId}`)\n            this.editor.customConfig.onchangeTimeout = this.changeInterval // 设置change事件触发时间间隔\n            this.editor.customConfig.uploadImgShowBase64 = true   // 使用 base64 保存图片\n            this.editor.customConfig.zIndex = 100 // 配置编辑区域的 z-index\n\n            this.editor.customConfig.onchange = (html) => {\n                let text = this.editor.txt.text()\n                if (this.cache) {\n                    localStorage.editorCache = html\n                }\n                this.$emit('input', this.valueType === 'html' ? html : text)\n                this.$emit('on-change', html, text)\n            }\n            this.editor.create() // create这个方法一定要在所有配置项之后调用\n            // this.editor.txt.html('<p>用 JS 设置的内容</p>') // 设置内容\n            // this.editor.txt.append('<p>追加的内容</p>') // 可继续追加内容。\n            // this.editor.txt.clear()清空编辑器内容\n            // console.log('this.editor.txt.html()----------'+this.editor.txt.html())// 显示内容\n            // console.log('this.editor.txt.getJSON()----------'+JSON.stringify(this.editor.txt.getJSON()))// 获取json格式内容\n\n            // 如果本地有存储加载本地存储内容\n            let html = ''\n            if (localStorage.getItem('editorCache')){\n                html = localStorage.getItem('editorCache')\n            } else {\n                html = this.value\n            }\n            if (html) {\n                this.editor.txt.html(html)\n                this.editor.change() // 更新编辑器\n            }\n        },\n        // 清除事件\n        onClear(){\n            this.editor.txt.clear()\n            localStorage.removeItem('editorCache')\n            this.editor.change() // 更新编辑器\n        },\n        onAppend(html){\n            console.log(html)\n            this.editor.txt.html(html)\n            this.editor.change() // 更新编辑器\n        }\n    },\n    watch: {\n    },\n    filters: {}\n}\n",{"version":3,"sources":["editor.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"editor.vue","sourceRoot":"src/components/editor","sourcesContent":["<template>\r\n    <div class=\"editor-page\">\r\n        <div :id=\"editorId\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Editor from 'wangeditor'\r\n    export default {\r\n        name: \"Editor\",\r\n        props:{\r\n            // 绑定的值\r\n            value: {\r\n                type: String,\r\n                default: ''\r\n            },\r\n            // 绑定的值的类型, enum: ['html', 'text']\r\n            valueType: {\r\n                type: String,\r\n                default: 'html',\r\n                validator: (val) => {\r\n                    // {String|Number} value 要验证的字符串或数值 validList 用来验证的列表\r\n                    function oneOf (value, validList) {\r\n                        for (let i = 0; i < validList.length; i++) {\r\n                            if (value === validList[i]) {\r\n                                return true\r\n                            }\r\n                        }\r\n                        return false\r\n                    }\r\n                    return oneOf(val, ['html', 'text'])\r\n                }\r\n            },\r\n            // 设置change事件触发时间间隔\r\n            changeInterval: {\r\n                type: Number,\r\n                default: 500\r\n            },\r\n            // 是否开启本地存储\r\n            cache: {\r\n                type: Boolean,\r\n                default: false\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n            }\r\n        },\r\n        created() {\r\n        },\r\n        mounted() {\r\n            this.init()\r\n        },\r\n        computed: {\r\n            editorId () {\r\n                return `editor${this._uid}`\r\n            }\r\n        },\r\n        methods: {\r\n            init(){\r\n                this.editor = new Editor(`#${this.editorId}`)\r\n                this.editor.customConfig.onchangeTimeout = this.changeInterval // 设置change事件触发时间间隔\r\n                this.editor.customConfig.uploadImgShowBase64 = true   // 使用 base64 保存图片\r\n                this.editor.customConfig.zIndex = 100 // 配置编辑区域的 z-index\r\n\r\n                this.editor.customConfig.onchange = (html) => {\r\n                    let text = this.editor.txt.text()\r\n                    if (this.cache) {\r\n                        localStorage.editorCache = html\r\n                    }\r\n                    this.$emit('input', this.valueType === 'html' ? html : text)\r\n                    this.$emit('on-change', html, text)\r\n                }\r\n                this.editor.create() // create这个方法一定要在所有配置项之后调用\r\n                // this.editor.txt.html('<p>用 JS 设置的内容</p>') // 设置内容\r\n                // this.editor.txt.append('<p>追加的内容</p>') // 可继续追加内容。\r\n                // this.editor.txt.clear()清空编辑器内容\r\n                // console.log('this.editor.txt.html()----------'+this.editor.txt.html())// 显示内容\r\n                // console.log('this.editor.txt.getJSON()----------'+JSON.stringify(this.editor.txt.getJSON()))// 获取json格式内容\r\n\r\n                // 如果本地有存储加载本地存储内容\r\n                let html = ''\r\n                if (localStorage.getItem('editorCache')){\r\n                    html = localStorage.getItem('editorCache')\r\n                } else {\r\n                    html = this.value\r\n                }\r\n                if (html) {\r\n                    this.editor.txt.html(html)\r\n                    this.editor.change() // 更新编辑器\r\n                }\r\n            },\r\n            // 清除事件\r\n            onClear(){\r\n                this.editor.txt.clear()\r\n                localStorage.removeItem('editorCache')\r\n                this.editor.change() // 更新编辑器\r\n            },\r\n            onAppend(html){\r\n                console.log(html)\r\n                this.editor.txt.html(html)\r\n                this.editor.change() // 更新编辑器\r\n            }\r\n        },\r\n        watch: {\r\n        },\r\n        filters: {}\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n    .editor-page {\r\n\r\n    }\r\n</style>"]}]}